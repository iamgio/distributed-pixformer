.include {setup.qmd}

.abstract
	This report presents the [Distributed Pixformer](https://github.com/iamgio/distributed-pixformer) project, made for the 2024-2025 Distributed Systems course at Unibo.
	This project builds upon the [Pixformer](https://github.com/iamgio/OOP22-pixformer) project, developed for the 2022-2023 Object-Oriented Programming course at Unibo, crafted in Java with an MVC architecture combined with ECS (Entity Component System), which was selected as a good foundation due to its modularity and maintainability. In this enhanced version it becomes possible to compete against players over the network in a fun Super Mario-like adventure.  
    Credits for the original project go to: Giorgio Garofalo, Giacomo Antonelli, NicolÃ² Ghignatti, Luca Patrignani.  


##### AI Disclaimer

```
"During the preparation of this work, the author(s) used GitHub Copilot
to assist with code completion and documentation generation.
After using this tool/service, the author(s) reviewed and edited the
content as needed and take(s) full responsibility for the content of the
final report/artifact."
```

# Concept

Pixformer is a GUI game designed as a clone of the classic 1985 *Super Mario Bros.*.  

Players take on the role of Mario, competing against each other to reach the end flag in horizontal levels, while collecting power-ups and defeating or avoiding enemies along the way.

#### Use case collection

The users will be interacting with the system while sitting in front of their own computer, connected to the Internet from different locations.
Although games will be started sporadically, interactions during a level are highly frequent
and happen via keyboard commands, which trigger events whose results are displayed on screen.

No data is stored persistently, but a lot of information needs to be exchanged.

# Requirements

#### Functional requirements

- While in the main menu, the user will be able to select a level to play.  
  If a game does not exist yet, it will be created and said user becomes its leader.  
  The system must be scalable enough to allow players to join a game at any time;
  
- Fault tolerance: if a player goes offline he will be kicked out of the game, and will be able to join again
  and start from his previous position and statistics.
    - However, if the leader goes offline, the game will end.

- During the game, a player will encounter different enemies, each with their own behavior:
    - Goomba: a small, brown, walking mushroom that can be defeated by jumping on it;
    - Koopa: a walking turtle that retreats into in its shell when jumped on. If a player hops on the shell, it will slide on the ground and damage any encountered entity in its path, including the player itself.

- A player can grab and use different power-ups:
    - Mushroom: increases Mario's height;
    - Fire Flower: allows Mario to shoot fireballs.
  
  If the player is hit by an enemy and has active power-ups, the most significant one is lost.
  
- The game world is composed of different block types:
    - Surprise: when hit from below, it produces a power-up;
    - Destructible: when hit from below, it is destroyed;
    - Indestructible: cannot be destroyed.

- Each player has a score, which is earned by collecting coins and defeating enemies. The leaderboard can be seen both during and after a game.

- A player's game ends if he: 
    - is damaged while in the smallest state;
    - falls into a pit;
    - reaches the end flag.
  
  A level finishes when all players have ended their game.
  
#### Non-functional requirements

- The game must run on the three main operative systems without any major difference;
- The codebase must be maintainable and scalable;
- Latency must be minimal to ensure a smooth experience, while ensuring a strong consistency between players.

# Design

## Architecture

The adopted architecture is a slight variation of client-server, the ***leader-follower*** pattern:
- The architecture is centralized by means of a server. However, it becomes an invisible detail for the user.
- When the client attempts a connection to a server and it fails, it sets the server up and connects to it again.
  By doing so, this client becomes the leader;
- Other clients that join are followers.

This architecture was chosen because of simplicity, efficacy, speed and complexity hiding from the user.
An alternative that was thoroughly considered was a peer-to-peer architecture which consisted of one server
per user, where all the servers could communicate.  
This strategy was discarded because of high complexity and potential latency issues, with the only benefit
being a better fault tolerance in case the leader goes offline.

## Infrastructure

- Each player is a client. $ N $ players can join a game;
- There is one server per game, located on the same machine as the leader client;
- For development and simplicity purposes, all clients will be running on the same machine.
  However, it is possible for clients to be distributed across the world as long as the leader's firewall
  accepts connections from outside the network. An additional centralized server might however be needed in order to allow searching for ready-to-join games;
- Data isn't stored persistently, and the state of the game is replicated on all $ N $ clients;
- Clients are assumed to know the IP of the server;
- No authentication is performed, mutual trust is assumed;
- Communication is performed via a *publish-subscribe* pattern: since the game is heavily event-based,
  clients will mainly announce the trigger of an event to the server, which may process it and eventually
  forward it to the other clients, hence clients are both publishers and subscribers;
- Entity mapping:
  - The game loop is performed on each client. Since the leader's client also overlaps with the server,
    it is the source of truth which periodically sends alignment updates to clients (see *Interaction*).
  - The rendering process is performed on the client side.

.box {TO DO}
    > Component diagrams are welcome here

<<<

## Modelling

The entry point of the distributed enhancement of the project lies in the `ServerManager`, which acts as a bridge between client and server which keeps track of the following information:
- The current WebSocket session with the server;
- Online players;
- Player index assigned to the client;
- Reconciliation routine;

and performs the following operations:
- Connects to the server, and also starts it if this is the leader client;
- Initializes the reconciliation routine;
- Gracefully disconnects from the server;
- Dispatches commands on specific players;
    
This lets the architecture of the original project stay untouched, aside for the new `ServerManager` component provided by the MVC `Controller`:

!(180x_)[ServerManager UML](img/class-uml/controller.svg "Position of the ServerManager in the MVC architecture.")

### Entities
The domain entities are:
- Players;
- Enemies (Goomba, Koopa);
- Power-ups (Mushroom, Fire Flower);
- End flag;

As defined by the Entity Component System (ECS) architecture, each entity is defined by a set of components: input, physics, collision and graphics.
For this report, only the input component is relevant, as it defines the reaction of the entity from a user input.

!(630x_)[Entity UML](img/class-uml/input.svg)

For instance, a Goomba's `InputComponent` may just be a `HorizontalModelInput`, as no complex movement is needed.
A `Player`, instead, requires a full `CompleteModelInput` to use all his features.

Why is the user input particularly important here? Let's say our client has to send information to the server
each time our player moves, jumps or does any other action. The most maintainable, invisible and elegant solution
would be to take the already existing `InputComponent` of the player, wrap it into a *decorator* and inject it as the entity's new input component.

The decorator performs the exact same operations as the wrapped input (*proxy* pattern), while also sending
messages to the server at each performed action:

!(500x_)[Decorator](img/class-uml/event-decorator.svg "Class diagram of the input decorator.")

### Events

Domain events are:
- Player:
    - joins;
    - quits;
    - moves horizontally;
    - jumps;
    - defeats enemy;
    - collects coin;
    - gets power-up;
    - shoots a fireball;
    - hits surprise/destructible block from below;
    - ends his game (by either enemy damage or falling);
- Enemy:
    - damages player;
    - changes state (e.g. Koopa retreats in its shell);
    
#### Commands

The subset of events that are directly triggered by user inputs are modeled by a `Command` class:

!(600x_)[Command UML](img/class-uml/command.svg "Class diagram of the command hierarchy.")

Commands must be serialized and deserialized in order to be exchanged:

!(220x_)[Command serializer UML](img/class-uml/command-serializer.svg "Class diagram of the command (de)serializer.")

Aside for alignment messages (see *Interaction*), these events represent the only kind of message exchanged between server and clients.

<<<

## Interaction

The system adopts a ***client-side prediction and server reconciliation*** pattern:
- The client processes user inputs (e.g. player movement) immediately in order to provide a responsive experience,
  updating its local game state independently. The event message is sent to the server.
- The server receives the event, updates its internal game state and broadcasts the event to the other clients,
  which update their game state as well.
- The server, which matches with the leader's client, acts as the authoritative source of truth, periodically sending its internal game state to the clients.
  This ensures consistency across clients, which may otherwise be compromised by latency or packet loss.

Clients send only event messages to the server. The server can instead send one of the two following messages to clients:
- Event messages received by a client, which are forwarded via broadcast to all the clients;
- A command to reconciliate with the centralized game state, which is attached in the message body and contains:
    - Online players and their score;
    - All entities in the world and their position, velocity and state.

.box {TODO}
    > Sequence diagrams are welcome here

## Behaviour

- how does _each_ component __behave__ individually (e.g. in _response_ to _events_ or messages)?
    * some components may be _stateful_, others _stateless_

- which components are in charge of updating the __state__ of the system? _when_? _how_?



> State diagrams are welcome here

## Data and Consistency Issues

Although no peristent data is stored, volatile game data is shared and replicated between clients. 
Consistency is guaranteed through periodic reconciliation with the server, as already mentioned.

### Fault-Tolerance

- The game state is replicated on each client with its own game loop, prioritizing availability over consistency in order to provide a smooth experience;

- If a client fails the reconciliation request twice in a row, meaning the server cannot be reached possibly because the leader player has quit the game, it is kicked out to the main menu;

- Heart-beating and timeout are used, as provided by the framework (see *Implementation*);

- If a client quits the game or crashes, its corresponding player entity is removed from the server and clients;

### Availability

- In case of network partitioning, the system prioritizes availability over consistency.
  In case a client goes offline for a short time, the user input is still processed immediately to provide
  a fast response and smooth experience. As soon as it comes back online (assuming it wasn't already kicked out
  due to timeout), the reconciliation will align its game state to the server's.

# Implementation

- Almost every interaction happens in a persistent WebStocket session between the server and each client;
    - In-transit data is represented using a simple text-based format: `n|event`, with `n` being the index of the player triggering the event, and `event` the event type. For example `2|jump` signals player 2 jumping.
    - These are by far the most common exchanged messages, thus having a simple-to-deserialize format is crucial for performance reasons.
    
- Ping (heart-beating) and timeout parameters match to 10 seconds: if a ping to the server fails, the session is closed;
    
- Client-to-server event messages are triggered by a `Decorator` that wraps the original player's input component, while also sending the corresponding message, on the active WebSocket session, for each action:
    ```kotlin
    class ServerEventCompleteModelInputDecorator(
        private val modelInput: CompleteModelInput,
        private val serverManager: ServerManager,
    ) : CompleteModelInput {
        override fun jump() {
            modelInput.jump() // Invokes the original action
            MessageToServer(PlayerJumpMessage).send(serverManager)
        }
        ...
    }
    ```
- Upon receiving an event message, the server does nothing but broadcasting it to all the clients.
    - When a client receives the event, it deserializes the message and performs the action on the player with the given index;
    - However, because of the leader-follower pattern, one of the clients shares the same game loop and state with the server, hence updating the centralized game state, acting as the single source of truth.
- Periodic reconciliation of a client to the server's game state happens via an HTTP GET request every 3 seconds;
    - The level state is represented using JSON, adopting the same structure used for loading levels from files;
    - Reconciliation is not triggered for the leader client;

## Technological details

- The base game was developed in Java.

- The distributed enhancement was developed in Kotlin, with the [Ktor](https://ktor.io) framework.

- The WebSocket protocol does not natively provide a broadcast feature, which was instead made possible by using Kotlin Coroutine's message flows, collecting each session.

# Validation

## Automatic Testing

- how were individual components **_unit_-test**ed?
- how was communication, interaction, and/or integration among components tested?
- how to **_end-to-end_-test** the system?
    * e.g. production vs. test environment

- for each test specify:
    * rationale of individual tests
    * how were the test automated
    * how to run them
    * which requirement they are testing, if any

> recall that _deployment_ __automation__ is commonly used to _test_ the system in _production-like_ environment

> recall to test corner cases (crashes, errors, etc.)

## Acceptance test

- did you perform any _manual_ testing?
    * what did you test?
    * why wasn't it automatic?


# Release

The project is structured into a single module, which is divided into two distinct parts: the `java` source root houses the original base project, containing the front-end and the entire game logic, while the `kotlin` source root contains the distributed features. These two parts are connected by the `Controller`.

Since there is no clear distinction between a client and a server from the userâs perspective, the artifact is packaged in a single JAR archive, available for download on GitHub Releases.

# Deployment

1. `./gradlew clean build`
2. `java -jar build/libs/pixformer-1.0-SNAPSHOT-all.jar`

A game window will open from the main menu. Games can be joined from there.

# User Guide

- how to use your software?
    * provide instructions
    * provide expected outcomes
    * provide screenshots if possible


# Self-evaluation

- An individual section is required for each member of the group
- Each member must self-evaluate their work, listing the strengths and weaknesses of the product
- Each member must describe their role within the group as objectively as possible. 
It should be noted that each student is only responsible for their own section