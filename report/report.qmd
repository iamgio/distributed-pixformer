.include {setup.qmd}

.abstract
	.loremipsum

##### AI Disclaimer

TODO

# Concept

Pixformer is a GUI game designed as a clone of the classic 1985 *Super Mario Bros.*.  

Players take on the role of Mario, competing against each other to reach the end flag in horizontal levels, while collecting power-ups and defeating or avoiding enemies along the way.

#### Use case collection

The users will be interacting with the system while sitting in front of their own computer, connected to the Internet from different locations.
Although games will be started sporadically, interactions during a level are highly frequent
and happen via keyboard commands, which trigger events whose results are displayed on screen.

No data is stored, but a lot of information needs to be exchanged.

# Requirements

#### Functional requirements

- In the main menu, the user will be asked to join a game.  
  If the prompted game does not exist, it will be created and said user is the leader.  
  The system must be scalable enough to allow players to join a game at any time;
  
- Fault tolerance: if a player goes offline he will be kicked out of the game, and will be able to join again
  and start from his previous position and statistics.
    - However, if the creator of the game goes offline, the game will end.

- During the game, a player will encounter different enemies, each with their own behavior:
    - Goomba: a small, brown, walking mushroom that can be defeated by jumping on it;
    - Koopa: a walking turtle that retreats into in its shell when jumped on. If a player hops on the shell, it will slide on the ground and damage any encountered entity in its path, including the player itself.

- A player can grab and use different power-ups:
    - Mushroom: increases Mario's height;
    - Fire Flower: allows Mario to shoot fireballs.
  
  If the player is hit by an enemy and has active power-ups, the most significant one is lost.
  
- The game world is composed of different block types:
    - Surprise: when hit from below, it produces a power-up;
    - Destructible: when hit from below, it is destroyed;
    - Indestructible: cannot be destroyed.

- Each player has a score, which is earned by collecting coins and defeating enemies.

- A player's game ends if he: 
    - is damaged while in the smallest state;
    - falls into a pit;
    - reaches the end flag.
  
  A level finishes when all players have ended their game.
  
#### Non-functional requirements

- The game must run on the three main operative systems without any major difference;
- The codebase must be maintainable and scalable;
- Latency must be minimal to ensure a smooth experience.

# Design

## Architecture

The adopted architecture is a slight variation of client-server, the ***leader-follower*** pattern:
- The architecture is centralized by means of a server. However, it becomes an invisible detail for the user.
- When the client attempts a connection to a server and it fails, it sets the server up and connects to it again.
  By doing so, this client is the leader;
- Other clients that join are followers.

This architecture was chosen because of simplicity, efficacy, speed and complexity hiding from the user.
An alternative that was thoroughly considered was a peer-to-peer architecture which consisted of one server
per user, where all the servers could communicate and use some replication system.  
This strategy was discarded because of high complexity and performance issues, with the only benefit
being a better fault tolerance in case one server goes offline.

## Infrastructure

- Each player is a client. $ N $ players can join a game;
- There is one server per game, located on the same machine as the leader client;
- For development and simplicity purposes, all clients will be running on the same machine.
  However, it is possible for clients to be distributed across the world as long as the leader's firewall
  accepts connections from outside the network;
- Data isn't stored, and the state of the game is replicated on all $ N $ clients;
- Clients are assumed to know the IP of the server, as it is typed by the user before joining a game;
- No authentication is performed, mutual trust is assumed;
- Communication is performed via a *publish-subscribe* pattern: since the game is heavily event-based,
  clients will mainly announce the trigger of an event to the server, which may process it and eventually
  forward it to the other clients, hence clients are both publishers and subscribers;
- Entity mapping:
  - The game loop is performed both on client and server side,
    with the server periodically sending alignment updates to clients (see *Interaction*).
  - The rendering process is performed on the client side.

.box {TO DO}
    > Component diagrams are welcome here

<<<

## Modelling

The domain entities are:
- Players;
- Enemies (Goomba, Koopa);
- Power-ups (Mushroom, Fire Flower);
- End flag;

Domain events are:
- Player:
    - joins;
    - quits;
    - moves horizontally;
    - jumps;
    - defeats enemy;
    - collects coin;
    - gets power-up;
    - shoots a fireball;
    - hits surprise/destructible block from below;
    - ends his game (by either enemy damage or falling);
- Enemy:
    - damages player;
    - changes state (e.g. Koopa retreats in its shell);

Aside for alignment messages (see *Interaction*), these events represent the only kind of message exchanged between
server and clients.

.box {TODO}
    > Class diagram are welcome here

<<<

## Interaction

The system adopts a ***client-side prediction and server reconciliation*** pattern:
- The client processes user inputs (e.g. player movement) immediately in order to provide a responsive experience,
  updating its local game state independently. The event message is sent to the server.
- The server receives the event, updates its internal game state and broadcasts the event to the other clients,
  which update their game state as well.
- The server acts as the authoritative source of truth, periodically sending its internal game state to the clients.
  This ensures consistency across clients, which may otherwise be compromised by latency or packet loss.

Clients send only event messages to the server. The server can instead send one of the two following messages to clients:
- Event messages received by a client, which are forwarded via broadcast to all the clients;
- A command to reconciliate to the centralized game state, which is attached in the message body and contains:
    - Online players and their score;
    - All entities in the world and their position, velocity and state.

.box {TODO}
    > Sequence diagrams are welcome here

## Behaviour

- how does _each_ component __behave__ individually (e.g. in _response_ to _events_ or messages)?
    * some components may be _stateful_, others _stateless_

- which components are in charge of updating the __state__ of the system? _when_? _how_?



> State diagrams are welcome here

## Data and Consistency Issues

- Is there any data that needs to be stored?
    * _what_ data? _where_? _why_?

- how should _persistent data_ be __stored__?
    * e.g. relations, documents, key-value, graph, etc.
    * why?

- Which components perform queries on the database?
    * _when_? _which_ queries? _why_?
    * concurrent read? concurrent write? why?

- Is there any data that needs to be shared between components?
    * _why_? _what_ data?

### Fault-Tolerance

- Is there any form of data __replication__ / federation / sharing?
    * _why_? _how_ does it work?

- Is there any __heart-beating__, __timeout__, __retry mechanism__?
    * _why_? _among_ which components? _how_ does it work?

- Is there any form of __error handling__?
    * _what_ happens when a component fails? _why_? _how_?

### Availability

- Is there any __caching__ mechanism?
    * _where_? _why_?

- Is there any form of __load balancing__?
    * _where_? _why_?

- In case of __network partitioning__, how does the system behave?
    * _why_? _how_?

### Security

- Is there any form of __authentication__?
    * _where_? _why_?

- Is there any form of __authorization__?
    * which sort of _access control_?
    * which sorts of users / _roles_? which _access rights_?

- Are __cryptographic schemas__ being used?
    * e.g. token verification, 
    * e.g. data encryption, etc.

--- 
<!-- Riparti da qui  -->

# Implementation

- which __network protocols__ to use?
    * e.g. UDP, TCP, HTTP, WebSockets, gRPC, XMPP, AMQP, MQTT, etc.
- how should _in-transit data_ be __represented__?
    * e.g. JSON, XML, YAML, Protocol Buffers, etc.
- how should _databases_ be __queried__?
    * e.g. SQL, NoSQL, etc.
- how should components be _authenticated_?
    * e.g. OAuth, JWT, etc.
- how should components be _authorized_?
    * e.g. RBAC, ABAC, etc.

## Technological details

- any particular _framework_ / _technology_ being exploited goes here

# Validation

## Automatic Testing

- how were individual components **_unit_-test**ed?
- how was communication, interaction, and/or integration among components tested?
- how to **_end-to-end_-test** the system?
    * e.g. production vs. test environment

- for each test specify:
    * rationale of individual tests
    * how were the test automated
    * how to run them
    * which requirement they are testing, if any

> recall that _deployment_ __automation__ is commonly used to _test_ the system in _production-like_ environment

> recall to test corner cases (crashes, errors, etc.)

## Acceptance test

- did you perform any _manual_ testing?
    * what did you test?
    * why wasn't it automatic?


# Release

- how where components organized into _inter-dependant modules_ or just a single monolith?
    * provide a _dependency graph_ if possible

- were modules distributed as a _single archive_ or _multiple ones_?
    * why?

- how were archive versioned? 

- were archive _released_ onto some archive repository (e.g. Maven, PyPI, npm, etc.)?
    * how to _install_ them?

# Deployment

- should one install your software from scratch, how to do it?
    * provide instructions
    * provide expected outcomes

# User Guide

- how to use your software?
    * provide instructions
    * provide expected outcomes
    * provide screenshots if possible


# Self-evaluation

- An individual section is required for each member of the group
- Each member must self-evaluate their work, listing the strengths and weaknesses of the product
- Each member must describe their role within the group as objectively as possible. 
It should be noted that each student is only responsible for their own section